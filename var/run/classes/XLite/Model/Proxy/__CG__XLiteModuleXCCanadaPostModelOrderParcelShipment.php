<?php

namespace XLite\Model\Proxy\__CG__\XLite\Module\XC\CanadaPost\Model\Order\Parcel;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Shipment extends \XLite\Module\XC\CanadaPost\Model\Order\Parcel\Shipment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'parcel', 'links', 'manifests', 'trackingDetails', 'shipmentId', 'shipmentStatus', 'trackingPin', 'returnTrackingPin', 'poNumber', '_previous_state');
        }

        return array('__isInitialized__', 'id', 'parcel', 'links', 'manifests', 'trackingDetails', 'shipmentId', 'shipmentStatus', 'trackingPin', 'returnTrackingPin', 'poNumber', '_previous_state');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Shipment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setParcel(\XLite\Module\XC\CanadaPost\Model\Order\Parcel $parcel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParcel', array($parcel));

        return parent::setParcel($parcel);
    }

    /**
     * {@inheritDoc}
     */
    public function addLink(\XLite\Module\XC\CanadaPost\Model\Order\Parcel\Shipment\Link $newLink)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLink', array($newLink));

        return parent::addLink($newLink);
    }

    /**
     * {@inheritDoc}
     */
    public function addManifest(\XLite\Module\XC\CanadaPost\Model\Order\Parcel\Manifest $manifest)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addManifest', array($manifest));

        return parent::addManifest($manifest);
    }

    /**
     * {@inheritDoc}
     */
    public function setTrackingDetails(\XLite\Module\XC\CanadaPost\Model\Order\Parcel\Shipment\Tracking $tracking = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrackingDetails', array($tracking));

        return parent::setTrackingDetails($tracking);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrackingDetails()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrackingDetails', array());

        return parent::getTrackingDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function hasManifests()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasManifests', array());

        return parent::hasManifests();
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkByRel($rel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkByRel', array($rel));

        return parent::getLinkByRel($rel);
    }

    /**
     * {@inheritDoc}
     */
    public function getPDFLinks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPDFLinks', array());

        return parent::getPDFLinks();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setShipmentId($shipmentId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShipmentId', array($shipmentId));

        return parent::setShipmentId($shipmentId);
    }

    /**
     * {@inheritDoc}
     */
    public function getShipmentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShipmentId', array());

        return parent::getShipmentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setShipmentStatus($shipmentStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShipmentStatus', array($shipmentStatus));

        return parent::setShipmentStatus($shipmentStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getShipmentStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShipmentStatus', array());

        return parent::getShipmentStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setTrackingPin($trackingPin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrackingPin', array($trackingPin));

        return parent::setTrackingPin($trackingPin);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrackingPin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrackingPin', array());

        return parent::getTrackingPin();
    }

    /**
     * {@inheritDoc}
     */
    public function setReturnTrackingPin($returnTrackingPin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReturnTrackingPin', array($returnTrackingPin));

        return parent::setReturnTrackingPin($returnTrackingPin);
    }

    /**
     * {@inheritDoc}
     */
    public function getReturnTrackingPin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReturnTrackingPin', array());

        return parent::getReturnTrackingPin();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoNumber($poNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoNumber', array($poNumber));

        return parent::setPoNumber($poNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoNumber', array());

        return parent::getPoNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getParcel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParcel', array());

        return parent::getParcel();
    }

    /**
     * {@inheritDoc}
     */
    public function addLinks(\XLite\Module\XC\CanadaPost\Model\Order\Parcel\Shipment\Link $links)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLinks', array($links));

        return parent::addLinks($links);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinks', array());

        return parent::getLinks();
    }

    /**
     * {@inheritDoc}
     */
    public function addManifests(\XLite\Module\XC\CanadaPost\Model\Order\Parcel\Manifest $manifests)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addManifests', array($manifests));

        return parent::addManifests($manifests);
    }

    /**
     * {@inheritDoc}
     */
    public function getManifests()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManifests', array());

        return parent::getManifests();
    }

    /**
     * {@inheritDoc}
     */
    public function _getPreviousState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_getPreviousState', array());

        return parent::_getPreviousState();
    }

    /**
     * {@inheritDoc}
     */
    public function map(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'map', array($data));

        return parent::map($data);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', array($name));

        return parent::__unset($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRepository', array());

        return parent::getRepository();
    }

    /**
     * {@inheritDoc}
     */
    public function checkCache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkCache', array());

        return parent::checkCache();
    }

    /**
     * {@inheritDoc}
     */
    public function detach()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detach', array());

        return parent::detach();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, array $args = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', array($method, $args));

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function isPropertyExists($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPropertyExists', array($name));

        return parent::isPropertyExists($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setterProperty($property, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setterProperty', array($property, $value));

        return parent::setterProperty($property, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getterProperty($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getterProperty', array($property));

        return parent::getterProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function isPersistent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPersistent', array());

        return parent::isPersistent();
    }

    /**
     * {@inheritDoc}
     */
    public function isDetached()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDetached', array());

        return parent::isDetached();
    }

    /**
     * {@inheritDoc}
     */
    public function isManaged()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isManaged', array());

        return parent::isManaged();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifierName', array());

        return parent::getUniqueIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifier', array());

        return parent::getUniqueIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', array());

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldMetadata($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldMetadata', array($property));

        return parent::getFieldMetadata($property);
    }

    /**
     * {@inheritDoc}
     */
    public function update()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', array());

        return parent::update();
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'create', array());

        return parent::create();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', array());

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function processFiles($field, array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'processFiles', array($field, $data));

        return parent::processFiles($field, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneEntity', array());

        return parent::cloneEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldsDefinition($class = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldsDefinition', array($class));

        return parent::getFieldsDefinition($class);
    }

    /**
     * {@inheritDoc}
     */
    public function prepareEntityBeforeCommit($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareEntityBeforeCommit', array($type));

        return parent::prepareEntityBeforeCommit($type);
    }

    /**
     * {@inheritDoc}
     */
    public function isSerializable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSerializable', array());

        return parent::isSerializable();
    }

}
