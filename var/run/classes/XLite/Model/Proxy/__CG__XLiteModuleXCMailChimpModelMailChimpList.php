<?php

namespace XLite\Model\Proxy\__CG__\XLite\Module\XC\MailChimp\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class MailChimpList extends \XLite\Module\XC\MailChimp\Model\MailChimpList implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'date_created', 'date_updated', 'list_rating', 'subscribe_url_short', 'subscribe_url_long', 'member_count', 'open_rate', 'click_rate', 'profiles', 'segments', 'groups', 'enabled', 'subscribeByDefault', 'isRemoved', 'store', '_previous_state');
        }

        return array('__isInitialized__', 'id', 'name', 'date_created', 'date_updated', 'list_rating', 'subscribe_url_short', 'subscribe_url_long', 'member_count', 'open_rate', 'click_rate', 'profiles', 'segments', 'groups', 'enabled', 'subscribeByDefault', 'isRemoved', 'store', '_previous_state');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (MailChimpList $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function isProfileSubscribed($profile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isProfileSubscribed', array($profile));

        return parent::isProfileSubscribed($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function doProfileSubscribe(\XLite\Model\Profile $profile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'doProfileSubscribe', array($profile));

        return parent::doProfileSubscribe($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function doProfileUnsubscribe(\XLite\Model\Profile $profile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'doProfileUnsubscribe', array($profile));

        return parent::doProfileUnsubscribe($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated($dateCreated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', array($dateCreated));

        return parent::setDateCreated($dateCreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', array());

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateUpdated($dateUpdated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateUpdated', array($dateUpdated));

        return parent::setDateUpdated($dateUpdated);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateUpdated', array());

        return parent::getDateUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setListRating($listRating)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setListRating', array($listRating));

        return parent::setListRating($listRating);
    }

    /**
     * {@inheritDoc}
     */
    public function getListRating()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getListRating', array());

        return parent::getListRating();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscribeUrlShort($subscribeUrlShort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscribeUrlShort', array($subscribeUrlShort));

        return parent::setSubscribeUrlShort($subscribeUrlShort);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscribeUrlShort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscribeUrlShort', array());

        return parent::getSubscribeUrlShort();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscribeUrlLong($subscribeUrlLong)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscribeUrlLong', array($subscribeUrlLong));

        return parent::setSubscribeUrlLong($subscribeUrlLong);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscribeUrlLong()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscribeUrlLong', array());

        return parent::getSubscribeUrlLong();
    }

    /**
     * {@inheritDoc}
     */
    public function setMemberCount($memberCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMemberCount', array($memberCount));

        return parent::setMemberCount($memberCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getMemberCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMemberCount', array());

        return parent::getMemberCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpenRate($openRate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpenRate', array($openRate));

        return parent::setOpenRate($openRate);
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenRate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenRate', array());

        return parent::getOpenRate();
    }

    /**
     * {@inheritDoc}
     */
    public function setClickRate($clickRate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClickRate', array($clickRate));

        return parent::setClickRate($clickRate);
    }

    /**
     * {@inheritDoc}
     */
    public function getClickRate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClickRate', array());

        return parent::getClickRate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscribeByDefault($subscribeByDefault)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscribeByDefault', array($subscribeByDefault));

        return parent::setSubscribeByDefault($subscribeByDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscribeByDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscribeByDefault', array());

        return parent::getSubscribeByDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsRemoved($isRemoved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsRemoved', array($isRemoved));

        return parent::setIsRemoved($isRemoved);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsRemoved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsRemoved', array());

        return parent::getIsRemoved();
    }

    /**
     * {@inheritDoc}
     */
    public function addProfiles(\XLite\Model\Profile $profiles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProfiles', array($profiles));

        return parent::addProfiles($profiles);
    }

    /**
     * {@inheritDoc}
     */
    public function getProfiles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfiles', array());

        return parent::getProfiles();
    }

    /**
     * {@inheritDoc}
     */
    public function addSegments(\XLite\Module\XC\MailChimp\Model\MailChimpSegment $segments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSegments', array($segments));

        return parent::addSegments($segments);
    }

    /**
     * {@inheritDoc}
     */
    public function getSegments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSegments', array());

        return parent::getSegments();
    }

    /**
     * {@inheritDoc}
     */
    public function addGroups(\XLite\Module\XC\MailChimp\Model\MailChimpGroup $groups)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGroups', array($groups));

        return parent::addGroups($groups);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', array());

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabledGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabledGroups', array());

        return parent::getEnabledGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getStore()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStore', array());

        return parent::getStore();
    }

    /**
     * {@inheritDoc}
     */
    public function setStore($store)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStore', array($store));

        return parent::setStore($store);
    }

    /**
     * {@inheritDoc}
     */
    public function _getPreviousState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_getPreviousState', array());

        return parent::_getPreviousState();
    }

    /**
     * {@inheritDoc}
     */
    public function map(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'map', array($data));

        return parent::map($data);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', array($name));

        return parent::__unset($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRepository', array());

        return parent::getRepository();
    }

    /**
     * {@inheritDoc}
     */
    public function checkCache()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkCache', array());

        return parent::checkCache();
    }

    /**
     * {@inheritDoc}
     */
    public function detach()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detach', array());

        return parent::detach();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, array $args = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', array($method, $args));

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function isPropertyExists($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPropertyExists', array($name));

        return parent::isPropertyExists($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setterProperty($property, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setterProperty', array($property, $value));

        return parent::setterProperty($property, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getterProperty($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getterProperty', array($property));

        return parent::getterProperty($property);
    }

    /**
     * {@inheritDoc}
     */
    public function isPersistent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPersistent', array());

        return parent::isPersistent();
    }

    /**
     * {@inheritDoc}
     */
    public function isDetached()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDetached', array());

        return parent::isDetached();
    }

    /**
     * {@inheritDoc}
     */
    public function isManaged()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isManaged', array());

        return parent::isManaged();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifierName', array());

        return parent::getUniqueIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueIdentifier', array());

        return parent::getUniqueIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', array());

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldMetadata($property)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldMetadata', array($property));

        return parent::getFieldMetadata($property);
    }

    /**
     * {@inheritDoc}
     */
    public function update()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', array());

        return parent::update();
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'create', array());

        return parent::create();
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', array());

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function processFiles($field, array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'processFiles', array($field, $data));

        return parent::processFiles($field, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneEntity', array());

        return parent::cloneEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldsDefinition($class = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFieldsDefinition', array($class));

        return parent::getFieldsDefinition($class);
    }

    /**
     * {@inheritDoc}
     */
    public function prepareEntityBeforeCommit($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prepareEntityBeforeCommit', array($type));

        return parent::prepareEntityBeforeCommit($type);
    }

    /**
     * {@inheritDoc}
     */
    public function isSerializable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSerializable', array());

        return parent::isSerializable();
    }

}
